{"version":3,"file":"static/js/473.bfb50cda.chunk.js","mappings":"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","sources":["webpack://pizza-test/./src/pages/employee/Employee.page.module.scss?0722","pages/employee/Employee.page.tsx","shared/hooks/useTypedSelector.ts","shared/hooks/useActions.ts","shared/hooks/getEmployeeById.ts","widgets/employee-form/resolvers/employee-form.resolver.ts","widgets/employee-form/consts/get-default-values.ts","widgets/employee-form/hooks/useEmployeeForm.ts","webpack://pizza-test/./src/widgets/employee-form/ui/EmployeeForm.module.scss?54c6","widgets/employee-form/ui/EmployeeForm.tsx","webpack://pizza-test/./src/widgets/header/Header.module.scss?22d4","widgets/header/Header.tsx","entities/employee/ui/EmployeeTableHead.tsx","shared/utils/getRole.ts","entities/employee/ui/EmployeeTableRow.tsx","webpack://pizza-test/./src/widgets/employees-table/EmployeesTable.module.scss?191d","widgets/employees-table/EmployeesTable.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Employee_page_wrapper__cxtXT\"};","import { EmployeeForm, Header } from 'widgets'\r\n\r\nimport styles from './Employee.page.module.scss'\r\n\r\nconst EmployeePage = () => {\r\n\treturn (\r\n\t\t<div className={styles.wrapper}>\r\n\t\t\t<Header\r\n\t\t\t\tcrumbs={['Список сотрудников']}\r\n\t\t\t\ttitle='Редактирование сотрудника'\r\n\t\t\t/>\r\n\t\t\t<main>\r\n\t\t\t\t<EmployeeForm />\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default EmployeePage\r\n","import { useSelector, TypedUseSelectorHook } from 'react-redux'\r\nimport { StateType } from '../store/store'\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<StateType> = useSelector\r\n","import { actions } from '../store/main.slice'\r\n\r\nexport const useActions = () => {\r\n\treturn { ...actions }\r\n}\r\n","import { useTypedSelector } from './useTypedSelector'\r\n\r\nexport const useGetEmployeeById = (id: number) => {\r\n\tconst employees = useTypedSelector(state => state.employees)\r\n\r\n\treturn employees.find(e => e.id === id)\r\n}\r\n","import { FieldErrors, Resolver } from 'react-hook-form'\r\n\r\nimport { EmployeeFormType } from 'shared/types'\r\n\r\nexport const resolver: Resolver<EmployeeFormType> = async values => {\r\n\tconst errors: FieldErrors<EmployeeFormType> = {}\r\n\r\n\tif (!values.name) {\r\n\t\terrors.name = {\r\n\t\t\ttype: 'required',\r\n\t\t\tmessage: 'Введите имя'\r\n\t\t}\r\n\t}\r\n\r\n\tif (!values.lastName) {\r\n\t\terrors.lastName = {\r\n\t\t\ttype: 'required',\r\n\t\t\tmessage: 'Введите фамилию'\r\n\t\t}\r\n\t}\r\n\r\n\tif (!values.birthday || values.birthday.length !== 10) {\r\n\t\terrors.birthday = {\r\n\t\t\ttype: 'required',\r\n\t\t\tmessage: 'Введите дату рождения'\r\n\t\t}\r\n\t}\r\n\r\n\tif (!values.phone || values.phone.length !== 17) {\r\n\t\terrors.phone = {\r\n\t\t\ttype: 'required',\r\n\t\t\tmessage: 'Введите номер телефона'\r\n\t\t}\r\n\t}\r\n\r\n\tif (!values.role || values.role === '-') {\r\n\t\terrors.role = {\r\n\t\t\ttype: 'required',\r\n\t\t\tmessage: 'Выберите роль'\r\n\t\t}\r\n\t}\r\n\treturn { values, errors }\r\n}\r\n","import { EmployeeFormType, EmployeeType } from 'shared/types'\r\n\r\nexport const getDefaultValues = (employee?: EmployeeType): EmployeeFormType => {\r\n\tconst names = employee?.name?.split(' ') ?? []\r\n\r\n\treturn {\r\n\t\tisArchive: employee?.isArchive ?? false,\r\n\t\trole: employee?.role ?? '-',\r\n\t\tphone: employee?.phone ?? '',\r\n\t\tname: names[0] ?? '',\r\n\t\tlastName: names[1] ?? '',\r\n\t\tbirthday: employee?.birthday ?? ''\r\n\t}\r\n}\r\n","import { useNavigate, useParams } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport { enqueueSnackbar } from 'notistack'\r\n\r\nimport { EmployeeFormType, RolesType } from 'shared/types'\r\nimport { useActions, useGetEmployeeById } from 'shared/hooks'\r\n\r\nimport { resolver } from '../resolvers/employee-form.resolver'\r\nimport { getDefaultValues } from '../consts/get-default-values'\r\n\r\nexport const useEmployeeForm = () => {\r\n\tconst { employeeId } = useParams()\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst { addEmployee, editEmployee } = useActions()\r\n\tconst employee = useGetEmployeeById(Number(employeeId) ?? 0)\r\n\r\n\tconst {\r\n\t\thandleSubmit,\r\n\t\tregister,\r\n\t\tcontrol,\r\n\t\tformState: { errors }\r\n\t} = useForm<EmployeeFormType>({\r\n\t\tdefaultValues: getDefaultValues(employee),\r\n\t\tresolver\r\n\t})\r\n\r\n\tconst handleEditEmployee = (data: EmployeeFormType, name: string) => {\r\n\t\tconst editedEmployee = {\r\n\t\t\t...data,\r\n\t\t\tid: employee?.id ?? 0,\r\n\t\t\tname,\r\n\t\t\trole: data.role as RolesType\r\n\t\t}\r\n\r\n\t\tdispatch(editEmployee(editedEmployee))\r\n\r\n\t\tenqueueSnackbar('Данные успешно обновлены', {\r\n\t\t\tvariant: 'success'\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleAddEmployee = (data: EmployeeFormType, name: string) => {\r\n\t\tdispatch(addEmployee({ ...data, name, role: data.role as RolesType }))\r\n\r\n\t\tenqueueSnackbar('Вы успешно добавили работника', {\r\n\t\t\tvariant: 'success'\r\n\t\t})\r\n\t}\r\n\r\n\tconst onSubmit = (data: EmployeeFormType) => {\r\n\t\tconst name = `${data.name} ${data.lastName}`\r\n\r\n\t\tif (employee) handleEditEmployee(data, name)\r\n\t\telse handleAddEmployee(data, name)\r\n\r\n\t\tnavigate('/')\r\n\t}\r\n\r\n\treturn { onSubmit, handleSubmit, register, control, errors }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fieldsWrapper\":\"EmployeeForm_fieldsWrapper__+5dst\",\"fields\":\"EmployeeForm_fields__VvAy4\",\"btnWrapper\":\"EmployeeForm_btnWrapper__DpoK9\"};","import { Controller } from 'react-hook-form'\r\nimport {\r\n\tArchiveCheckbox,\r\n\tButton,\r\n\tMaskTextField,\r\n\tRoleSelect,\r\n\tTextField\r\n} from 'shared/components'\r\n\r\nimport { useEmployeeForm } from '../hooks/useEmployeeForm'\r\n\r\nimport styles from './EmployeeForm.module.scss'\r\n\r\nconst EmployeeForm = () => {\r\n\tconst { control, handleSubmit, onSubmit, register, errors } =\r\n\t\tuseEmployeeForm()\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<h2>Данные сотрудника:</h2>\r\n\t\t\t<div className={styles.fieldsWrapper}>\r\n\t\t\t\t<div className={styles.fields}>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tlabel='Имя'\r\n\t\t\t\t\t\tname='name'\r\n\t\t\t\t\t\tregister={register}\r\n\t\t\t\t\t\terror={errors?.name?.message}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tlabel='Фамилия'\r\n\t\t\t\t\t\tname='lastName'\r\n\t\t\t\t\t\tregister={register}\r\n\t\t\t\t\t\terror={errors?.lastName?.message}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<MaskTextField\r\n\t\t\t\t\t\tlabel='Номер телефона'\r\n\t\t\t\t\t\tname='phone'\r\n\t\t\t\t\t\tcontrol={control}\r\n\t\t\t\t\t\terror={errors?.phone?.message}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<MaskTextField\r\n\t\t\t\t\t\tlabel='Дата рождения'\r\n\t\t\t\t\t\tname='birthday'\r\n\t\t\t\t\t\tcontrol={control}\r\n\t\t\t\t\t\terror={errors?.birthday?.message}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.fields}>\r\n\t\t\t\t\t<Controller\r\n\t\t\t\t\t\tcontrol={control}\r\n\t\t\t\t\t\tname='role'\r\n\t\t\t\t\t\trender={({ field: { name, onChange, ref, value } }) => (\r\n\t\t\t\t\t\t\t<RoleSelect\r\n\t\t\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\t\t\tref={ref}\r\n\t\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\t\tisRow={true}\r\n\t\t\t\t\t\t\t\terror={errors?.role?.message}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<ArchiveCheckbox {...register('isArchive')} isRow={true} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.btnWrapper}>\r\n\t\t\t\t<Button variant='classic'>Сохранить</Button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default EmployeeForm\r\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Header_header__GYEG7\",\"title\":\"Header_title__XXQuN\",\"crumbs\":\"Header_crumbs__WN2hd\",\"nextIcon\":\"Header_nextIcon__Ama7O\"};","import { NavLink } from 'react-router-dom'\r\nimport { Fragment } from 'react'\r\nimport { MdNavigateNext } from 'react-icons/md'\r\n\r\nimport styles from './Header.module.scss'\r\n\r\ntype HeaderProps = {\r\n\tcrumbs: string[]\r\n\ttitle: string\r\n}\r\n\r\nconst Header = (props: HeaderProps) => {\r\n\tconst { crumbs, title } = props\r\n\r\n\treturn (\r\n\t\t<header className={styles.header}>\r\n\t\t\t<div className={styles.crumbs}>\r\n\t\t\t\t{crumbs.map(crumb => (\r\n\t\t\t\t\t<Fragment key={crumb}>\r\n\t\t\t\t\t\t<NavLink to={'/'}>{crumb}</NavLink>\r\n\t\t\t\t\t\t<MdNavigateNext className={styles.nextIcon} />\r\n\t\t\t\t\t</Fragment>\r\n\t\t\t\t))}\r\n\t\t\t\t<span>{title}</span>\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.title}>\r\n\t\t\t\t<h1>{title}</h1>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","import { useDispatch } from 'react-redux'\r\n\r\nimport { useActions, useTypedSelector } from 'shared/hooks'\r\nimport { SortLabel } from 'shared/components'\r\n\r\nconst EmployeeTableHead = () => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst { sortByName, sortByBirthday } = useTypedSelector(state => state)\r\n\tconst { setSortByName, setSortByBirthday } = useActions()\r\n\r\n\tconst onSortByName = (direction: 'up' | 'down') => {\r\n\t\tdispatch(setSortByName(direction))\r\n\t}\r\n\r\n\tconst onSortByBirthday = (direction: 'up' | 'down') => {\r\n\t\tdispatch(setSortByBirthday(direction))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t\tИмя\r\n\t\t\t\t\t<SortLabel direction={sortByName} onClick={onSortByName} />\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\tДата рождения\r\n\t\t\t\t\t<SortLabel direction={sortByBirthday} onClick={onSortByBirthday} />\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>Должность</td>\r\n\t\t\t\t<td>Номер телефона</td>\r\n\t\t\t\t<td>В архиве</td>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t)\r\n}\r\n\r\nexport default EmployeeTableHead\r\n","import { RolesType } from '../types/employee.types'\r\n\r\nexport const getRole = (role: RolesType) => {\r\n\tswitch (role) {\r\n\t\tcase 'cook':\r\n\t\t\treturn 'Повар'\r\n\t\tcase 'driver':\r\n\t\t\treturn 'Водитель'\r\n\t\tcase 'waiter':\r\n\t\t\treturn 'Официант'\r\n\t}\r\n}\r\n","import { useNavigate } from 'react-router-dom'\r\n\r\nimport { EmployeeType } from 'shared/types'\r\nimport { getRole } from 'shared/utils'\r\n\r\ntype EmployeeRowProps = {\r\n\temployee: EmployeeType\r\n}\r\nconst EmployeeTableRow = (props: EmployeeRowProps) => {\r\n\tconst { employee } = props\r\n\tconst navigate = useNavigate()\r\n\r\n\tconst onClick = () => navigate(`/employee/${employee.id}`)\r\n\r\n\treturn (\r\n\t\t<tr onClick={onClick}>\r\n\t\t\t<td>{employee.name}</td>\r\n\t\t\t<td>{employee.birthday}</td>\r\n\t\t\t<td>{getRole(employee.role)}</td>\r\n\t\t\t<td>{employee.phone}</td>\r\n\t\t\t<td>{employee.isArchive ? '+' : '-'}</td>\r\n\t\t</tr>\r\n\t)\r\n}\r\n\r\nexport default EmployeeTableRow\r\n","// extracted by mini-css-extract-plugin\nexport default {\"tableWrapper\":\"EmployeesTable_tableWrapper__8RNMe\"};","import { EmployeeTableHead, EmployeeTableRow } from 'entities/employee'\r\nimport { useTypedSelector } from 'shared/hooks'\r\n\r\nimport styles from './EmployeesTable.module.scss'\r\n\r\nconst EmployeesTable = () => {\r\n\tconst employees = useTypedSelector(state => state.filteredData)\r\n\r\n\treturn (\r\n\t\t<div className={styles.tableWrapper}>\r\n\t\t\t<table>\r\n\t\t\t\t<EmployeeTableHead />\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{employees.map(employee => (\r\n\t\t\t\t\t\t<EmployeeTableRow key={employee.id} employee={employee} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default EmployeesTable\r\n"],"names":["EmployeePage","_jsxs","className","styles","children","_jsx","Header","crumbs","title","EmployeeForm","useTypedSelector","useSelector","useActions","actions","useGetEmployeeById","id","state","employees","find","e","resolver","async","errors","values","name","type","message","lastName","birthday","length","phone","role","getDefaultValues","employee","_employee$name$split","_employee$name","_employee$isArchive","_employee$role","_employee$phone","_names$","_names$2","_employee$birthday","names","split","isArchive","useEmployeeForm","_Number","employeeId","useParams","dispatch","useDispatch","navigate","useNavigate","addEmployee","editEmployee","Number","handleSubmit","register","control","formState","useForm","defaultValues","onSubmit","data","handleEditEmployee","_employee$id","editedEmployee","enqueueSnackbar","variant","handleAddEmployee","_errors$name","_errors$lastName","_errors$phone","_errors$birthday","TextField","label","error","MaskTextField","Controller","render","_ref","_errors$role","field","onChange","ref","value","RoleSelect","isRow","ArchiveCheckbox","Button","props","map","crumb","Fragment","NavLink","to","MdNavigateNext","EmployeeTableHead","sortByName","sortByBirthday","setSortByName","setSortByBirthday","SortLabel","direction","onClick","getRole","EmployeesTable","filteredData","EmployeeTableRow"],"sourceRoot":""}